/* The following code was generated by JFlex 1.4.1 on 19-4-9 上午12:13 */

package crystal.parser;

import java.io.*;
import java.util.*;
import crystal.general.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 19-4-9 上午12:13 from the specification file
 * <tt>/home/kexinxin/桌面/fastcheck-1.0/src/crystal/parser/gnuc.lex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYCOMMENT = 1;
  public static final int YYINITIAL = 0;
  public static final int YYATTRIBUTE = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\22\1\0\1\1\1\2\22\0\1\1\1\77\1\23"+
    "\1\111\1\0\1\73\1\74\1\20\1\63\1\64\1\71\1\70\1\103"+
    "\1\10\1\26\1\72\1\24\11\3\1\104\1\100\1\67\1\66\1\65"+
    "\1\110\1\0\2\6\1\55\1\6\1\7\1\13\2\4\1\57\2\4"+
    "\1\15\1\4\1\54\1\60\1\11\1\4\1\61\1\4\1\56\1\17"+
    "\2\4\1\25\1\62\1\4\1\105\1\21\1\106\1\75\1\52\1\0"+
    "\1\32\1\27\1\34\1\42\1\31\1\12\1\43\1\45\1\41\1\4"+
    "\1\33\1\14\1\53\1\37\1\36\1\50\1\4\1\30\1\35\1\40"+
    "\1\16\1\5\1\44\1\51\1\47\1\46\1\101\1\76\1\102\1\107"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\4\1\5\4\4\2\1"+
    "\1\3\1\6\14\4\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\1\1\2\3\35\1\0\1\3\1\36\1\4"+
    "\1\37\1\40\1\41\3\4\2\0\1\4\3\0\1\42"+
    "\2\0\17\4\1\43\2\4\1\44\3\4\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\0\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\0\2\66\1\67\1\0\1\70\1\36\1\0\1\36"+
    "\3\4\1\71\3\4\1\72\1\3\1\0\1\73\10\4"+
    "\1\74\13\4\1\75\21\4\1\76\1\77\1\2\1\4"+
    "\1\100\1\4\1\101\2\4\1\0\1\102\4\4\1\103"+
    "\1\104\1\4\1\105\1\106\2\4\1\107\12\4\1\110"+
    "\20\4\1\111\1\4\1\112\1\102\1\0\1\102\1\113"+
    "\4\4\1\114\6\4\1\115\5\4\1\116\10\4\1\74"+
    "\10\4\1\117\1\4\1\120\1\4\1\121\1\122\1\123"+
    "\1\124\1\125\1\126\1\4\1\127\1\4\1\130\23\4"+
    "\1\131\1\132\11\4\1\114\3\4\1\133\1\134\1\135"+
    "\1\136\1\137\2\4\1\140\10\4\1\126\1\127\3\4"+
    "\1\141\7\4\1\133\1\4\1\135\16\4\1\2\4\4"+
    "\2\0\3\4\1\142\1\4\1\143\1\4\1\144\1\4"+
    "\1\145";

  private static int [] zzUnpackAction() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\336\0\u0128\0\u0172\0\u01bc"+
    "\0\u0206\0\u0250\0\u029a\0\u02e4\0\u032e\0\u0378\0\u03c2\0\u040c"+
    "\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612\0\u065c"+
    "\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce\0\336\0\336\0\u0818"+
    "\0\u0862\0\u08ac\0\u08f6\0\u0940\0\u098a\0\u09d4\0\u0a1e\0\u0a68"+
    "\0\u0ab2\0\u0afc\0\336\0\336\0\336\0\336\0\336\0\336"+
    "\0\336\0\336\0\336\0\u0b46\0\u0b90\0\336\0\u0bda\0\u0c24"+
    "\0\u0c6e\0\u0cb8\0\u0d02\0\u0d4c\0\336\0\336\0\336\0\u0d96"+
    "\0\u0de0\0\u0e2a\0\u0378\0\u03c2\0\u0e74\0\u0ebe\0\u0f08\0\u0f52"+
    "\0\336\0\u0f9c\0\u0fe6\0\u1030\0\u107a\0\u10c4\0\u110e\0\u1158"+
    "\0\u11a2\0\u11ec\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e\0\u13a8"+
    "\0\u13f2\0\u143c\0\u0172\0\u1486\0\u14d0\0\u151a\0\u1564\0\u15ae"+
    "\0\u15f8\0\u1642\0\336\0\336\0\336\0\u168c\0\336\0\336"+
    "\0\336\0\336\0\336\0\u16d6\0\336\0\336\0\336\0\336"+
    "\0\336\0\336\0\336\0\u0b46\0\u0b46\0\336\0\336\0\u0bda"+
    "\0\336\0\u1720\0\u176a\0\336\0\u17b4\0\u17fe\0\u1848\0\u0172"+
    "\0\u1892\0\u18dc\0\u1926\0\336\0\u1970\0\u19ba\0\336\0\u1a04"+
    "\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c\0\u1b76\0\u1bc0\0\u1c0a\0\u0172"+
    "\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6\0\u1e10\0\u1e5a"+
    "\0\u1ea4\0\u1eee\0\u1f38\0\u0172\0\u1f82\0\u1fcc\0\u2016\0\u2060"+
    "\0\u20aa\0\u20f4\0\u213e\0\u2188\0\u21d2\0\u221c\0\u2266\0\u22b0"+
    "\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u2422\0\336\0\336\0\u16d6"+
    "\0\u246c\0\u0172\0\u24b6\0\u0172\0\u2500\0\u254a\0\u2594\0\u25de"+
    "\0\u2628\0\u2672\0\u26bc\0\u2706\0\u0172\0\u0172\0\u2750\0\u0172"+
    "\0\u0172\0\u279a\0\u27e4\0\u0172\0\u282e\0\u2878\0\u28c2\0\u290c"+
    "\0\u2956\0\u29a0\0\u29ea\0\u2a34\0\u2a7e\0\u2ac8\0\u0172\0\u2b12"+
    "\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84\0\u2cce\0\u2d18\0\u2d62"+
    "\0\u2dac\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68\0\u0172"+
    "\0\u2fb2\0\u0172\0\u2ffc\0\u3046\0\336\0\u0172\0\u3090\0\u30da"+
    "\0\u3124\0\u316e\0\u0172\0\u31b8\0\u3202\0\u324c\0\u3296\0\u32e0"+
    "\0\u332a\0\u0172\0\u3374\0\u33be\0\u3408\0\u3452\0\u349c\0\u0172"+
    "\0\u34e6\0\u3530\0\u357a\0\u35c4\0\u360e\0\u3658\0\u36a2\0\u36ec"+
    "\0\u3736\0\u3780\0\u37ca\0\u3814\0\u385e\0\u38a8\0\u38f2\0\u393c"+
    "\0\u3986\0\u0172\0\u39d0\0\u0172\0\u3a1a\0\u0172\0\u0172\0\u0172"+
    "\0\u0172\0\u0172\0\u0172\0\u3a64\0\u0172\0\u3aae\0\u0172\0\u3af8"+
    "\0\u3b42\0\u3b8c\0\u3bd6\0\u3c20\0\u3c6a\0\u3cb4\0\u3cfe\0\u3d48"+
    "\0\u3d92\0\u3ddc\0\u3e26\0\u3e70\0\u3eba\0\u3f04\0\u3f4e\0\u3f98"+
    "\0\u3fe2\0\u402c\0\u0172\0\u0172\0\u4076\0\u40c0\0\u410a\0\u4154"+
    "\0\u419e\0\u41e8\0\u4232\0\u427c\0\u42c6\0\u4310\0\u435a\0\u43a4"+
    "\0\u43ee\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u4438\0\u4482"+
    "\0\u0172\0\u44cc\0\u4516\0\u4560\0\u45aa\0\u45f4\0\u463e\0\u4688"+
    "\0\u46d2\0\u471c\0\u4766\0\u47b0\0\u47fa\0\u4844\0\u0172\0\u488e"+
    "\0\u48d8\0\u4922\0\u496c\0\u49b6\0\u4a00\0\u4a4a\0\u4a94\0\u4ade"+
    "\0\u4b28\0\u4b72\0\u4bbc\0\u4c06\0\u4c50\0\u4c9a\0\u4ce4\0\u4d2e"+
    "\0\u4d78\0\u4dc2\0\u4e0c\0\u4e56\0\u4ea0\0\u4eea\0\u4f34\0\u0172"+
    "\0\u4f7e\0\u4fc8\0\u5012\0\u505c\0\u50a6\0\u50f0\0\u513a\0\u5184"+
    "\0\u51ce\0\336\0\u5218\0\u0172\0\u5262\0\u0172\0\u52ac\0\u0172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\2\7\1\11\1\7"+
    "\1\12\1\7\1\13\1\14\1\15\1\7\1\16\1\4"+
    "\1\5\1\17\1\20\1\7\1\21\1\22\1\23\1\24"+
    "\1\25\1\7\1\26\1\27\2\7\1\30\1\31\1\32"+
    "\1\33\1\34\5\7\1\35\10\7\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\71\5\1\65\20\5\63\66"+
    "\1\67\1\70\25\66\115\0\1\6\3\0\1\71\4\0"+
    "\4\72\4\0\1\6\1\0\1\73\2\0\1\71\63\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\34\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\7\7\1\74"+
    "\24\7\37\0\1\75\54\0\1\76\1\77\26\0\5\7"+
    "\1\0\3\7\1\100\3\7\4\0\2\7\1\0\7\7"+
    "\1\101\24\7\32\0\5\7\1\0\7\7\4\0\2\7"+
    "\1\0\7\7\1\102\24\7\32\0\5\7\1\0\7\7"+
    "\1\103\2\0\1\104\2\7\1\0\34\7\32\0\5\7"+
    "\1\0\7\7\4\0\2\7\1\0\10\7\1\105\23\7"+
    "\27\0\20\106\1\0\1\107\70\106\21\104\1\110\1\104"+
    "\1\111\66\104\3\0\1\6\3\0\1\71\4\0\4\72"+
    "\4\0\1\6\1\112\1\73\2\0\1\71\17\0\1\112"+
    "\43\0\1\73\20\0\1\73\1\0\1\113\66\0\5\7"+
    "\1\0\7\7\4\0\2\7\1\0\1\7\1\114\32\7"+
    "\32\0\5\7\1\0\7\7\4\0\2\7\1\0\2\7"+
    "\1\115\31\7\32\0\5\7\1\0\3\7\1\116\3\7"+
    "\4\0\2\7\1\0\10\7\1\117\11\7\1\120\11\7"+
    "\32\0\5\7\1\0\5\7\1\121\1\7\4\0\2\7"+
    "\1\0\6\7\1\122\25\7\32\0\5\7\1\0\7\7"+
    "\4\0\2\7\1\0\3\7\1\123\3\7\1\124\6\7"+
    "\1\125\15\7\32\0\5\7\1\0\7\7\4\0\2\7"+
    "\1\0\11\7\1\126\1\127\2\7\1\130\1\131\15\7"+
    "\32\0\5\7\1\0\7\7\4\0\2\7\1\0\20\7"+
    "\1\132\13\7\32\0\5\7\1\0\1\7\1\133\5\7"+
    "\4\0\2\7\1\0\10\7\1\134\23\7\32\0\5\7"+
    "\1\0\7\7\4\0\2\7\1\0\2\7\1\135\4\7"+
    "\1\136\24\7\32\0\5\7\1\0\7\7\4\0\2\7"+
    "\1\0\7\7\1\137\24\7\32\0\5\7\1\0\7\7"+
    "\4\0\2\7\1\0\16\7\1\140\15\7\32\0\5\7"+
    "\1\0\7\7\4\0\2\7\1\0\23\7\1\141\10\7"+
    "\114\0\1\142\1\143\111\0\1\144\111\0\1\145\1\146"+
    "\110\0\1\147\1\0\1\150\107\0\1\151\111\0\1\152"+
    "\2\0\1\153\1\154\105\0\1\155\111\0\1\156\5\0"+
    "\1\157\103\0\1\160\111\0\1\161\7\0\1\162\101\0"+
    "\1\163\23\0\2\164\1\165\17\164\1\166\67\164\72\0"+
    "\1\167\17\0\64\170\1\66\25\170\64\0\1\171\30\0"+
    "\1\172\4\0\1\173\13\0\1\172\43\0\1\173\35\0"+
    "\4\72\75\0\1\73\3\0\1\71\2\0\4\174\6\0"+
    "\1\73\4\0\1\71\63\0\5\7\1\0\3\7\1\175"+
    "\3\7\4\0\2\7\1\0\12\7\1\176\21\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\7\7\1\177"+
    "\24\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\1\7\1\200\32\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\10\7\1\201\23\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\6\7\1\202\3\7\1\203"+
    "\21\7\27\0\20\106\1\204\1\107\112\106\1\0\67\106"+
    "\22\104\1\0\67\104\3\0\1\205\2\0\2\205\2\0"+
    "\2\205\10\0\1\205\1\0\1\206\1\205\1\0\2\205"+
    "\1\0\1\205\5\0\1\205\12\0\1\205\62\0\1\207"+
    "\66\0\5\7\1\0\7\7\4\0\2\7\1\0\2\7"+
    "\1\210\31\7\32\0\5\7\1\0\7\7\4\0\2\7"+
    "\1\0\6\7\1\211\2\7\1\212\2\7\1\213\17\7"+
    "\32\0\5\7\1\0\7\7\4\0\2\7\1\0\6\7"+
    "\1\214\25\7\32\0\5\7\1\0\5\7\1\215\1\7"+
    "\4\0\2\7\1\0\34\7\32\0\5\7\1\0\7\7"+
    "\4\0\2\7\1\0\11\7\1\216\22\7\32\0\5\7"+
    "\1\0\7\7\4\0\2\7\1\0\11\7\1\217\22\7"+
    "\32\0\5\7\1\0\7\7\4\0\2\7\1\0\24\7"+
    "\1\220\7\7\32\0\5\7\1\0\7\7\4\0\2\7"+
    "\1\0\6\7\1\221\25\7\32\0\5\7\1\0\7\7"+
    "\4\0\2\7\1\0\10\7\1\222\23\7\32\0\5\7"+
    "\1\0\7\7\4\0\2\7\1\0\3\7\1\223\30\7"+
    "\32\0\5\7\1\0\7\7\4\0\2\7\1\0\1\7"+
    "\1\224\1\7\1\225\30\7\32\0\5\7\1\0\7\7"+
    "\4\0\2\7\1\0\14\7\1\226\2\7\1\227\14\7"+
    "\32\0\5\7\1\0\7\7\4\0\2\7\1\0\12\7"+
    "\1\230\21\7\32\0\5\7\1\0\7\7\4\0\2\7"+
    "\1\0\7\7\1\231\24\7\32\0\5\7\1\0\7\7"+
    "\4\0\2\7\1\0\21\7\1\232\12\7\32\0\5\7"+
    "\1\0\3\7\1\233\3\7\4\0\2\7\1\0\11\7"+
    "\1\234\22\7\32\0\5\7\1\0\1\7\1\235\5\7"+
    "\4\0\2\7\1\0\34\7\32\0\5\7\1\0\5\7"+
    "\1\236\1\7\4\0\2\7\1\0\34\7\32\0\5\7"+
    "\1\0\7\7\4\0\2\7\1\0\11\7\1\237\22\7"+
    "\32\0\5\7\1\0\7\7\4\0\2\7\1\0\12\7"+
    "\1\240\21\7\32\0\2\7\1\241\2\7\1\0\1\242"+
    "\1\243\1\244\1\245\3\7\4\0\2\7\1\0\1\246"+
    "\1\247\1\250\1\251\1\7\1\252\1\253\2\7\1\254"+
    "\1\255\21\7\115\0\1\256\111\0\1\257\23\0\2\154"+
    "\1\260\17\154\1\5\67\154\3\0\1\172\6\0\4\174"+
    "\6\0\1\172\70\0\1\172\20\0\1\172\70\0\5\7"+
    "\1\0\7\7\4\0\2\7\1\0\3\7\1\261\30\7"+
    "\32\0\5\7\1\0\7\7\4\0\2\7\1\0\13\7"+
    "\1\262\20\7\32\0\5\7\1\0\7\7\4\0\2\7"+
    "\1\0\3\7\1\263\30\7\32\0\5\7\1\0\7\7"+
    "\4\0\2\7\1\0\14\7\1\264\17\7\32\0\5\7"+
    "\1\0\7\7\4\0\2\7\1\0\12\7\1\265\21\7"+
    "\32\0\5\7\1\0\7\7\4\0\2\7\1\0\7\7"+
    "\1\266\24\7\32\0\1\205\2\0\2\205\1\0\1\267"+
    "\2\205\4\72\4\0\1\205\1\0\1\270\1\205\1\0"+
    "\2\205\1\0\1\205\5\0\1\205\5\0\1\267\4\0"+
    "\1\205\37\0\1\270\2\0\2\270\2\0\2\270\10\0"+
    "\1\270\2\0\1\270\1\0\2\270\1\0\1\270\5\0"+
    "\1\270\12\0\1\270\37\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\3\7\1\271\30\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\11\7\1\272\22\7\32\0"+
    "\5\7\1\0\5\7\1\273\1\7\4\0\2\7\1\0"+
    "\34\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\12\7\1\274\21\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\2\7\1\275\31\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\24\7\1\276\7\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\2\7\1\277"+
    "\31\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\7\7\1\300\24\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\2\7\1\301\31\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\6\7\1\302\2\7\1\303"+
    "\22\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\1\7\1\304\32\7\32\0\5\7\1\0\5\7\1\305"+
    "\1\7\4\0\2\7\1\0\34\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\11\7\1\306\22\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\10\7\1\307"+
    "\23\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\2\7\1\310\31\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\11\7\1\311\22\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\1\7\1\312\32\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\2\7\1\313"+
    "\31\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\12\7\1\314\21\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\3\7\1\315\30\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\1\316\33\7\32\0\5\7"+
    "\1\0\7\7\4\0\2\7\1\0\7\7\1\317\24\7"+
    "\32\0\5\7\1\0\3\7\1\320\3\7\4\0\2\7"+
    "\1\0\34\7\32\0\5\7\1\0\7\7\4\0\2\7"+
    "\1\0\7\7\1\321\24\7\32\0\5\7\1\0\7\7"+
    "\4\0\2\7\1\0\32\7\1\322\1\7\32\0\5\7"+
    "\1\0\5\7\1\323\1\7\4\0\2\7\1\0\34\7"+
    "\32\0\5\7\1\0\6\7\1\324\4\0\2\7\1\0"+
    "\34\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\3\7\1\325\30\7\32\0\5\7\1\0\5\7\1\326"+
    "\1\7\4\0\2\7\1\0\34\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\2\7\1\327\31\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\22\7\1\330"+
    "\11\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\6\7\1\331\2\7\1\332\22\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\7\7\1\333\24\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\12\7\1\334"+
    "\21\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\20\7\1\335\13\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\10\7\1\336\23\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\11\7\1\337\22\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\11\7\1\340"+
    "\22\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\14\7\1\341\17\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\10\7\1\342\23\7\32\0\1\343\4\0"+
    "\1\344\13\0\1\343\43\0\1\344\24\0\1\270\2\0"+
    "\2\270\1\0\1\267\2\270\2\345\6\0\1\270\2\0"+
    "\1\270\1\0\2\270\1\0\1\270\5\0\1\270\5\0"+
    "\1\267\4\0\1\270\37\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\4\7\1\346\27\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\1\7\1\347\32\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\1\7\1\350"+
    "\32\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\6\7\1\351\25\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\1\7\1\352\32\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\11\7\1\353\22\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\12\7\1\354"+
    "\21\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\5\7\1\355\26\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\12\7\1\356\21\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\2\7\1\357\31\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\7\7\1\360"+
    "\24\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\5\7\1\361\26\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\11\7\1\362\22\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\7\7\1\363\3\7\1\364"+
    "\20\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\10\7\1\365\23\7\32\0\5\7\1\0\5\7\1\366"+
    "\1\7\4\0\2\7\1\0\34\7\32\0\5\7\1\0"+
    "\3\7\1\367\3\7\4\0\2\7\1\0\34\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\2\7\1\370"+
    "\31\7\32\0\5\7\1\0\3\7\1\371\3\7\4\0"+
    "\2\7\1\0\34\7\32\0\4\7\1\372\1\0\7\7"+
    "\4\0\2\7\1\0\34\7\32\0\5\7\1\0\7\7"+
    "\4\0\2\7\1\0\10\7\1\373\23\7\32\0\5\7"+
    "\1\0\7\7\4\0\2\7\1\0\25\7\1\374\6\7"+
    "\32\0\5\7\1\0\7\7\4\0\2\7\1\0\1\375"+
    "\33\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\12\7\1\376\21\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\6\7\1\377\25\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\11\7\1\u0100\22\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\24\7\1\u0101"+
    "\7\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\11\7\1\u0102\22\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\10\7\1\u0103\23\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\14\7\1\u0104\17\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\21\7\1\u0105"+
    "\12\7\32\0\5\7\1\0\3\7\1\u0106\3\7\4\0"+
    "\2\7\1\0\34\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\12\7\1\u0107\21\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\10\7\1\u0108\23\7\32\0"+
    "\1\343\6\0\4\345\6\0\1\343\70\0\1\343\20\0"+
    "\1\343\70\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\12\7\1\u0109\21\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\10\7\1\u010a\23\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\11\7\1\u010b\22\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\10\7\1\u010c"+
    "\23\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\10\7\1\u010d\23\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\11\7\1\u010e\22\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\5\7\1\u010f\26\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\13\7\1\u0110"+
    "\20\7\32\0\5\7\1\0\1\7\1\u0111\5\7\4\0"+
    "\2\7\1\0\34\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\16\7\1\u0112\15\7\32\0\5\7\1\0"+
    "\1\7\1\u0113\5\7\4\0\2\7\1\0\34\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\2\7\1\u0114"+
    "\31\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\2\7\1\u0115\31\7\32\0\5\7\1\0\3\7\1\u0116"+
    "\3\7\4\0\2\7\1\0\34\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\2\7\1\u0117\31\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\3\7\1\u0118"+
    "\30\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\27\7\1\u0119\4\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\5\7\1\u011a\26\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\26\7\1\u011b\5\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\2\7\1\u011c"+
    "\31\7\32\0\5\7\1\0\3\7\1\u011d\3\7\4\0"+
    "\2\7\1\0\34\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\11\7\1\u011e\22\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\2\7\1\u011f\31\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\23\7\1\u0120"+
    "\10\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\1\7\1\u0121\32\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\6\7\1\u0122\25\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\10\7\1\u0123\23\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\2\7\1\u0124"+
    "\31\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\12\7\1\u0125\21\7\32\0\5\7\1\0\3\7\1\u0126"+
    "\3\7\4\0\2\7\1\0\34\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\2\7\1\u0127\31\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\5\7\1\u0128"+
    "\26\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\2\7\1\u0129\31\7\32\0\5\7\1\0\5\7\1\u012a"+
    "\1\7\4\0\2\7\1\0\34\7\32\0\5\7\1\0"+
    "\1\7\1\u012b\5\7\4\0\2\7\1\0\34\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\11\7\1\u012c"+
    "\22\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\11\7\1\u012d\22\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\27\7\1\u012e\4\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\23\7\1\u012f\10\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\27\7\1\u0130"+
    "\4\7\32\0\5\7\1\0\3\7\1\u0131\3\7\4\0"+
    "\2\7\1\0\34\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\11\7\1\u0132\22\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\1\7\1\u0133\32\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\10\7\1\u0134"+
    "\23\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\23\7\1\220\10\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\12\7\1\u0135\21\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\11\7\1\u0136\22\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\2\7\1\u0137"+
    "\31\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\7\7\1\u0138\24\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\10\7\1\u0139\23\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\2\7\1\u013a\31\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\13\7\1\u013b"+
    "\20\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\11\7\1\u013c\22\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\1\7\1\u013d\32\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\2\7\1\u013e\31\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\12\7\1\u013f"+
    "\21\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\33\7\1\u0140\32\0\5\7\1\0\7\7\4\0\2\7"+
    "\1\0\23\7\1\u0141\10\7\32\0\5\7\1\0\7\7"+
    "\4\0\2\7\1\0\30\7\1\u0142\3\7\32\0\5\7"+
    "\1\0\7\7\4\0\2\7\1\0\23\7\1\u0143\10\7"+
    "\32\0\5\7\1\0\7\7\4\0\2\7\1\0\12\7"+
    "\1\u0144\21\7\32\0\5\7\1\0\7\7\4\0\2\7"+
    "\1\0\12\7\1\u0145\21\7\32\0\5\7\1\0\7\7"+
    "\4\0\2\7\1\0\6\7\1\u0146\25\7\32\0\5\7"+
    "\1\0\7\7\4\0\2\7\1\0\1\u0147\33\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\23\7\1\u0148"+
    "\10\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\13\7\1\u0149\20\7\32\0\5\7\1\0\1\7\1\u014a"+
    "\5\7\4\0\2\7\1\0\34\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\2\7\1\u014b\31\7\32\0"+
    "\5\7\1\0\3\7\1\u014c\3\7\4\0\2\7\1\0"+
    "\34\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\23\7\1\u014d\10\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\31\7\1\u014e\2\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\23\7\1\u014f\10\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\10\7\1\u0150"+
    "\23\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\5\7\1\u0151\26\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\12\7\1\u0152\21\7\32\0\5\7\1\0"+
    "\5\7\1\u0153\1\7\4\0\2\7\1\0\34\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\23\7\1\353"+
    "\10\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\23\7\1\u0154\10\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\23\7\1\u0155\10\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\23\7\1\u0156\10\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\2\7\1\u0157"+
    "\31\7\32\0\5\7\1\0\2\7\1\244\4\7\4\0"+
    "\2\7\1\0\34\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\25\7\1\u011a\6\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\23\7\1\u0158\10\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\11\7\1\u0159"+
    "\22\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\7\7\1\u015a\24\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\11\7\1\u015b\22\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\23\7\1\u0110\10\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\23\7\1\u0113"+
    "\10\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\23\7\1\u0115\10\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\23\7\1\u015c\10\7\32\0\2\7\1\u015d"+
    "\2\7\1\0\7\7\4\0\2\7\1\0\7\7\1\u015e"+
    "\24\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\23\7\1\u015f\10\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\10\7\1\u0160\23\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\2\7\1\u0161\31\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\23\7\1\u013a"+
    "\10\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\3\7\1\u0162\30\7\32\0\5\7\1\0\1\7\1\u0163"+
    "\5\7\4\0\2\7\1\0\34\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\23\7\1\u013c\10\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\23\7\1\u0164"+
    "\10\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\23\7\1\u0165\10\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\23\7\1\u0166\10\7\32\0\5\7\1\0"+
    "\1\7\1\u0167\5\7\4\0\2\7\1\0\34\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\23\7\1\u0168"+
    "\10\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\23\7\1\u0169\10\7\32\0\5\7\1\0\3\7\1\u016a"+
    "\3\7\4\0\2\7\1\0\3\7\1\u016b\30\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\6\7\1\u016c"+
    "\25\7\30\0\2\u016d\2\7\1\u0169\2\7\1\0\7\7"+
    "\2\0\1\u016d\1\0\2\7\1\0\34\7\1\u016e\31\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\12\7\1\u016f"+
    "\21\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\1\7\1\u0170\32\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\2\7\1\u0171\31\7\30\0\2\u016d\2\0"+
    "\1\u016d\14\0\1\u016d\40\0\1\u016e\111\0\1\u0172\31\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\6\7\1\u0173"+
    "\25\7\32\0\5\7\1\0\7\7\4\0\2\7\1\0"+
    "\14\7\1\u0174\17\7\32\0\5\7\1\0\7\7\4\0"+
    "\2\7\1\0\11\7\1\u0175\22\7\32\0\5\7\1\0"+
    "\7\7\4\0\2\7\1\0\11\7\1\u0176\22\7\32\0"+
    "\5\7\1\0\7\7\4\0\2\7\1\0\7\7\1\u0177"+
    "\24\7\32\0\5\7\1\0\1\7\1\u0178\5\7\4\0"+
    "\2\7\1\0\34\7\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21238];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\30\1\2\11\13\1\11\11\2\1\1\11"+
    "\2\1\1\0\3\1\3\11\3\1\2\0\1\1\3\0"+
    "\1\11\2\0\27\1\3\11\1\1\5\11\1\0\7\11"+
    "\1\0\1\1\2\11\1\0\1\11\1\1\1\0\1\11"+
    "\7\1\1\11\1\1\1\0\1\11\46\1\2\11\7\1"+
    "\1\0\54\1\1\0\1\11\207\1\2\0\3\1\1\11"+
    "\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    protected Lexer(String f) {
        this(getStream(f));
        file = f;
        sourceFile = f;
    }

    private static FileInputStream getStream(String filename) {
        FileInputStream stream = null;
        try {
            stream = new FileInputStream(filename);
        }
	    catch (FileNotFoundException e) {
            System.err.println("\nFile not found: \"" + filename + "\"");
            System.exit(1);
	    }
        return stream;
    }
    
	Token token(int id) {
    	line = yyline + 1;
    	int ln = Options.REPORT_SOURCE ? line + linediff : line;
    	String fl = Options.REPORT_SOURCE ? sourceFile : file;
        return new Token(id, fl, ln, yycolumn, yytext());
    }
   
    Token token(int id, Object value) {
    	line = yyline + 1;
    	int ln = Options.REPORT_SOURCE ? line + linediff : line;
    	String fl = Options.REPORT_SOURCE ? sourceFile : file;
        return new Token(id, fl, ln, yycolumn, yytext(), value);
    }
	
	public static String getSourceFile() {
	    return Options.REPORT_SOURCE ? sourceFile : file;
	}
	
	public static String getFile() {
	    return file;
	}
	
	public static int getSourceLine() {
    	return Options.REPORT_SOURCE ? line + linediff : line;
	}
	
	public static int getLine() {
    	return line;
	}
	
    private static int linediff = 0;
    private static int line;
    private static String sourceFile;
    private static boolean reportSource;
    private static String file;
    private static StringBuffer buf;
    
    void parseLineDirective(String s) {
       StringTokenizer st = new StringTokenizer(s);
       if (!st.hasMoreElements()) return;
	   String tok = st.nextToken();
       if (!st.hasMoreElements()) return;
       tok = st.nextToken();
       try {
        	 linediff = Integer.parseInt(tok) - yyline - 2;
       } catch (NumberFormatException e) { }
       if (!st.hasMoreElements()) return;
       tok = st.nextToken();
       if (tok.charAt(0) == '\"')
       	 sourceFile = tok.substring(1,tok.length()-1);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(InputStream in) {
    this(new InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 77: 
          { return token(sym.SHORT);
          }
        case 102: break;
        case 64: 
          { return token(sym.VOID);
          }
        case 103: break;
        case 100: 
          { return token(sym.BUILTIN_VA_LIST);
          }
        case 104: break;
        case 82: 
          { return token(sym.STATIC);
          }
        case 105: break;
        case 30: 
          { return token(sym.CONSTANT_FLOAT);
          }
        case 106: break;
        case 6: 
          { return token(sym.DOT);
          }
        case 107: break;
        case 34: 
          { return token(sym.STRING_LITERAL);
          }
        case 108: break;
        case 9: 
          { return token(sym.GT_OP);
          }
        case 109: break;
        case 28: 
          { return token(sym.QUESTION);
          }
        case 110: break;
        case 61: 
          { return token(sym.INT);
          }
        case 111: break;
        case 63: 
          { return token(sym.LEFT_ASSIGN);
          }
        case 112: break;
        case 76: 
          { return token(sym.CONST);
          }
        case 113: break;
        case 62: 
          { return token(sym.RIGHT_ASSIGN);
          }
        case 114: break;
        case 18: 
          { return token(sym.BAR);
          }
        case 115: break;
        case 67: 
          { return token(sym.ELSE);
          }
        case 116: break;
        case 44: 
          { return token(sym.MUL_ASSIGN);
          }
        case 117: break;
        case 8: 
          { return token(sym.RPAREN);
          }
        case 118: break;
        case 15: 
          { return token(sym.PERCENT);
          }
        case 119: break;
        case 11: 
          { return token(sym.LT_OP);
          }
        case 120: break;
        case 94: 
          { return token(sym.REGISTER);
          }
        case 121: break;
        case 36: 
          { return token(sym.DO);
          }
        case 122: break;
        case 87: 
          { return token(sym.INLINE);
          }
        case 123: break;
        case 52: 
          { return token(sym.OR_OP);
          }
        case 124: break;
        case 48: 
          { return token(sym.AND_ASSIGN);
          }
        case 125: break;
        case 92: 
          { return token(sym.UNSIGNED);
          }
        case 126: break;
        case 96: 
          { return token(sym.FUNCTION);
          }
        case 127: break;
        case 41: 
          { return token(sym.LEFT_OP);
          }
        case 128: break;
        case 10: 
          { return token(sym.ASSIGN);
          }
        case 129: break;
        case 33: 
          { return token(sym.SUB_ASSIGN);
          }
        case 130: break;
        case 90: 
          { return token(sym.DEFAULT);
          }
        case 131: break;
        case 75: 
          { return token(sym.BREAK);
          }
        case 132: break;
        case 66: 
          { return token(sym.CONSTANT_HEXFLOAT);
          }
        case 133: break;
        case 43: 
          { return token(sym.INC_OP);
          }
        case 134: break;
        case 42: 
          { return token(sym.ADD_ASSIGN);
          }
        case 135: break;
        case 7: 
          { return token(sym.LPAREN);
          }
        case 136: break;
        case 20: 
          { return token(sym.SEMI);
          }
        case 137: break;
        case 80: 
          { return token(sym.EXTERN);
          }
        case 138: break;
        case 88: 
          { return token(sym.DOUBLE);
          }
        case 139: break;
        case 46: 
          { yybegin(YYCOMMENT);
          }
        case 140: break;
        case 53: 
          { return token(sym.NE_OP);
          }
        case 141: break;
        case 89: 
          { return token(sym.TYPEDEF);
          }
        case 142: break;
        case 85: 
          { return token(sym.SWITCH);
          }
        case 143: break;
        case 73: 
          { return token(sym.FLOAT);
          }
        case 144: break;
        case 65: 
          { return token(sym.LONG);
          }
        case 145: break;
        case 12: 
          { return token(sym.PLUS);
          }
        case 146: break;
        case 5: 
          { return token(sym.MINUS);
          }
        case 147: break;
        case 45: 
          { return token(sym.DIV_ASSIGN);
          }
        case 148: break;
        case 47: 
          { return token(sym.MOD_ASSIGN);
          }
        case 149: break;
        case 69: 
          { return token(sym.AUTO);
          }
        case 150: break;
        case 97: 
          { return token(sym.LABEL);
          }
        case 151: break;
        case 58: 
          { return token(sym.CONSTANT_CHAR);
          }
        case 152: break;
        case 19: 
          { return token(sym.BANG);
          }
        case 153: break;
        case 68: 
          { return token(sym.ENUM);
          }
        case 154: break;
        case 24: 
          { return token(sym.COLON);
          }
        case 155: break;
        case 91: 
          { return token(sym.VOLATILE);
          }
        case 156: break;
        case 54: 
          { parseLineDirective(yytext());
          }
        case 157: break;
        case 50: 
          { return token(sym.XOR_ASSIGN);
          }
        case 158: break;
        case 26: 
          { return token(sym.RBRACK);
          }
        case 159: break;
        case 72: 
          { return token(sym.GOTO);
          }
        case 160: break;
        case 35: 
          { return token(sym.IF);
          }
        case 161: break;
        case 99: 
          { return token(sym.BUILTIN_VA_ARG);
          }
        case 162: break;
        case 95: 
          { return token(sym.CONTINUE);
          }
        case 163: break;
        case 31: 
          { return token(sym.DEC_OP);
          }
        case 164: break;
        case 93: 
          { return token(sym.RESTRICT);
          }
        case 165: break;
        case 37: 
          { return token(sym.RIGHT_OP);
          }
        case 166: break;
        case 78: 
          { return token(sym.WHILE);
          }
        case 167: break;
        case 71: 
          { return token(sym.CHAR);
          }
        case 168: break;
        case 101: 
          { return token(sym.BUILTIN_OFFSETOF);
          }
        case 169: break;
        case 55: 
          { yybegin(YYINITIAL);
          }
        case 170: break;
        case 27: 
          { return token(sym.TILDA);
          }
        case 171: break;
        case 38: 
          { return token(sym.GE_OP);
          }
        case 172: break;
        case 16: 
          { return token(sym.AMPERSAND);
          }
        case 173: break;
        case 1: 
          { System.err.println("\nLexical error: \"" + file +
                                            "\", line " + yyline +
                                            ", char: '" + yytext() + "'"); 
                        System.exit(1);
          }
        case 174: break;
        case 23: 
          { return token(sym.COMMA);
          }
        case 175: break;
        case 4: 
          { Type t = Symtab.lookupTypedef(yytext());
    if (t != null) return token(sym.TYPE_NAME, t);
    return token(sym.IDENTIFIER);
          }
        case 176: break;
        case 57: 
          { return token(sym.FOR);
          }
        case 177: break;
        case 84: 
          { return token(sym.SIZEOF);
          }
        case 178: break;
        case 59: 
          { return token(sym.ELLIPSIS);
          }
        case 179: break;
        case 22: 
          { return token(sym.RBRACE);
          }
        case 180: break;
        case 25: 
          { return token(sym.LBRACK);
          }
        case 181: break;
        case 74: 
          { return token(sym.UNION);
          }
        case 182: break;
        case 81: 
          { return token(sym.STRUCT);
          }
        case 183: break;
        case 40: 
          { return token(sym.LE_OP);
          }
        case 184: break;
        case 14: 
          { return token(sym.DIV);
          }
        case 185: break;
        case 86: 
          { return token(sym.TYPEOF);
          }
        case 186: break;
        case 49: 
          { return token(sym.AND_OP);
          }
        case 187: break;
        case 56: 
          { yybegin(YYINITIAL); 
                              return token(sym.ATTRIBUTE, buf.toString());
          }
        case 188: break;
        case 83: 
          { return token(sym.SIGNED);
          }
        case 189: break;
        case 70: 
          { return token(sym.CASE);
          }
        case 190: break;
        case 17: 
          { return token(sym.CARET);
          }
        case 191: break;
        case 51: 
          { return token(sym.OR_ASSIGN);
          }
        case 192: break;
        case 79: 
          { return token(sym.RETURN);
          }
        case 193: break;
        case 32: 
          { return token(sym.PTR_OP);
          }
        case 194: break;
        case 29: 
          { buf.append(yytext());
          }
        case 195: break;
        case 98: 
          { buf = new StringBuffer(); yybegin(YYATTRIBUTE);
          }
        case 196: break;
        case 60: 
          { return token(sym.ASM);
          }
        case 197: break;
        case 13: 
          { return token(sym.STAR);
          }
        case 198: break;
        case 39: 
          { return token(sym.EQ_OP);
          }
        case 199: break;
        case 3: 
          { return token(sym.CONSTANT_INT);
          }
        case 200: break;
        case 2: 
          { 
          }
        case 201: break;
        case 21: 
          { return token(sym.LBRACE);
          }
        case 202: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return token(sym.EOF, "<<EOF>>");
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
